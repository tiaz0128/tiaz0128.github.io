## 계층별 실습 가이드

### 1. 응용 계층 (Application Layer)

- 공부 포인트: HTTP 요청/응답, DNS 쿼리, 이메일 전송 등 사용자 중심의 동작 이해.
- 실습 방법:
  - Wireshark로 HTTP 트래픽 캡처: 브라우저에서 웹사이트를 열고, Wireshark로 요청과 응답을 분석해보세요. 헤더와 상태 코드를 확인하며 동작 방식을 익힙니다.
  - 간단한 클라이언트-서버 구현: Python의 `socket` 모듈로 간단한 채팅 프로그램을 만들어 HTTP와 비슷한 요청-응답 구조를 체험합니다.
  - DNS 쿼리 확인: `nslookup` 또는 `dig` 명령어로 도메인 이름을 IP로 변환하는 과정을 실습합니다.

### 2. 전송 계층 (Transport Layer)

- 공부 포인트: TCP의 신뢰성(3-way handshake, 재전송)과 UDP의 경량화 이해.
- 실습 방법:
  - TCP 연결 관찰: Wireshark로 TCP 3-way handshake(SYN, SYN-ACK, ACK)를 캡처하고, 패킷 손실 시 재전송 과정을 확인합니다.
  - UDP 스트리밍 테스트: Python으로 UDP 소켓을 사용해 간단한 데이터 스트리밍을 구현하고, TCP와 달리 손실이 발생하는지 확인합니다.
  - 포트 스캔: `nmap`으로 특정 호스트의 열린 포트를 확인하며 TCP/UDP 포트의 역할을 이해합니다.

### 3. 인터넷 계층 (Internet Layer)

- 공부 포인트: IP 주소, 라우팅, 패킷 분할/재조립.
- 실습 방법:
  - 핑과 트레이서트: `ping`으로 패킷 왕복 시간을 측정하고, `tracert`(Windows) 또는 `traceroute`(Linux)로 패킷 경로를 추적합니다.
  - IP 헤더 분석: Wireshark에서 IP 패킷을 캡처해 TTL, 프로토콜 필드 등을 확인하며 라우팅 과정을 이해합니다.
  - 가상 네트워크 구축: GNS3나 Packet Tracer로 소규모 네트워크를 만들어 IP 주소 할당과 라우팅 테이블을 설정해봅니다.

### 4. 네트워크 인터페이스 계층 (Network Interface Layer)

- 공부 포인트: MAC 주소, 이더넷 프레임, ARP 프로토콜.
- 실습 방법:
  - ARP 동작 확인: `arp -a` 명령어로 ARP 테이블을 확인하고, Wireshark로 ARP 요청/응답을 캡처합니다.
  - 이더넷 프레임 분석: Wireshark로 캡처한 패킷에서 MAC 주소를 확인하며 물리적 계층과 데이터 링크 계층의 연결을 이해합니다.
  - 로컬 네트워크 테스트: 두 대의 PC를 직접 연결해 이더넷 케이블로 통신하며 프레임 전송을 실습합니다.

## 1. 네트워크 액세스 계층 실습

### Docker 네트워크 인터페이스 탐색

```bash
# Docker 네트워크 생성
docker network create --subnet=192.168.100.0/24 my-network

# 컨테이너 두 개 실행
docker run -d --name host1 --network my-network --ip 192.168.100.2 alpine sleep infinity
docker run -d --name host2 --network my-network --ip 192.168.100.3 alpine sleep infinity

# 네트워크 인터페이스 확인
docker exec host1 ip addr show
docker exec host2 ip addr show
```

### ARP 테이블 확인

1. 시작 시, host1은 게이트웨이(192.168.100.1)의 MAC 주소만 알고 있었습니다.
2. host1이 host2(192.168.100.3)에 ICMP 에코 요청(ping)을 보냄
3. 이제 host2의 IP 주소(192.168.100.3)와 MAC 주소(02:42:c0:a8:64:03)가 ARP 테이블에 추가됨

```bash
docker exec host1 arp -a
```

### MAC 주소와 ARP 동작 관찰

```bash
# 컨테이너에 ping 도구 설치
docker exec host1 apk add iputils

# ping을 보내기 전과 후의 ARP 테이블 변화 관찰
docker exec host1 arp -a
docker exec host1 ping -c 3 192.168.100.3
docker exec host1 arp -a
```

```text
? (192.168.100.1) at 02:42:7b:25:23:f0 [ether]  on eth0

? (192.168.100.1) at 02:42:7b:25:23:f0 [ether]  on eth0
host2.my-network (192.168.100.3) at 02:42:c0:a8:64:03 [ether]  on eth0
```

이 실험에서 발생한 ARP(Address Resolution Protocol) 테이블의 변화를 설명해 드리겠습니다.

### 동작 원리 설명

이 과정은 다음과 같이 진행됩니다:

1. **ARP 동작 시작**: 
   - host1이 host2(192.168.100.3)에 패킷을 보내려고 할 때, 목적지 IP 주소는 알지만 MAC 주소는 모름
   - 패킷 전송을 위해선 이더넷 프레임에 목적지 MAC 주소가 필요함

2. **ARP 요청 브로드캐스트**:
   - host1은 ARP 요청 패킷을 브로드캐스트(MAC FF:FF:FF:FF:FF:FF)로 전송
   - "192.168.100.3인 장치는 자신의 MAC 주소를 알려주세요"라는 메시지

3. **ARP 응답 수신**:
   - host2가 이 요청을 받고 "제 IP는 192.168.100.3이고 MAC 주소는 02:42:c0:a8:64:03입니다"라고 응답
   - 이 응답은 host1에게 직접(유니캐스트) 전송됨

4. **ARP 테이블 업데이트**:
   - host1은 이 정보를 받아 ARP 테이블에 저장
   - 이제 host1은 host2의 MAC 주소를 알게 되어 직접 이더넷 프레임을 보낼 수 있음

5. **ICMP 에코 요청 전송**:
   - ARP가 해결된 후 실제 ping(ICMP 에코 요청) 패킷이 전송됨

## 2. 인터넷 계층 실습

### IP 라우팅과 서브넷 구성

```bash
# 다른 서브넷의 네트워크 생성
docker network create --subnet=172.19.0.0/16 second-network

# 새 네트워크에 컨테이너 연결
docker run -d --name router --network my-network alpine sleep infinity
docker network connect second-network router

# 라우터 컨테이너에 필요 도구 설치
docker exec router apk add iptables

# IP 포워딩 활성화
docker exec router sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"

# 서브넷 간 라우팅 설정
docker exec router iptables -t nat -A POSTROUTING -s 172.18.0.0/16 -o eth1 -j MASQUERADE
docker exec router iptables -t nat -A POSTROUTING -s 172.19.0.0/16 -o eth0 -j MASQUERADE
```

### ICMP와 traceroute 실습

```bash
# traceroute 도구 설치
docker exec host1 apk add traceroute

# 외부 호스트로 traceroute 실행
docker exec host1 traceroute google.com
```

## 3. 전송 계층 실습

### TCP 연결 상태 관찰

```bash
# netcat 설치
docker exec host1 apk add netcat-openbsd
docker exec host2 apk add netcat-openbsd

# host2에서 TCP 서버 실행
docker exec -d host2 sh -c "nc -l -p 8888"

# host1에서 연결
docker exec -it host1 sh -c "nc 172.18.0.3 8888"

# 다른 터미널에서 연결 상태 확인
docker exec host2 netstat -tnp
```

### UDP vs TCP 비교 실습

```bash
# host2에서 UDP 서버 실행
docker exec -d host2 sh -c "nc -u -l -p 9999"

# host1에서 UDP 클라이언트 실행
docker exec -it host1 sh -c "nc -u 172.18.0.3 9999"

# 패킷 캡처로 차이점 관찰
docker exec host1 apk add tcpdump
docker exec host1 tcpdump -i eth0 -n "port 8888 or port 9999"
```

## 4. 응용 계층 실습

### HTTP 서버 구축 및 테스트

```bash
# Nginx 컨테이너 실행
docker run -d --name webserver --network my-network --ip 172.18.0.4 nginx:alpine

# curl로 요청 테스트
docker exec host1 apk add curl
docker exec host1 curl -v http://172.18.0.4
```

### DNS 서버 구축

```bash
# DNS 서버 컨테이너 실행
docker run -d --name dns-server --network my-network --ip 172.18.0.5 \
  andyshinn/dnsmasq:latest --log-queries --address=/example.test/172.18.0.4

# DNS 쿼리 테스트
docker exec host1 apk add bind-tools
docker exec host1 dig @172.18.0.5 example.test
```


## TCP/IP 실습

이제 Docker를 이용해 TCP/IP 각 계층의 핵심 내용을 실습해보겠습니다.

### Docker Compose

<!-- # docker-compose.yml -->

```yaml
services:
  client:
    image: alpine
    networks:
      frontend:
        ipv4_address: 172.20.0.2
    command: sleep infinity
    depends_on:
      - web
      - dns
    dns:
      - 172.20.0.53

  web:
    image: nginx:alpine
    networks:
      frontend:
        ipv4_address: 172.20.0.3
      backend:
        ipv4_address: 172.21.0.3
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
  
  api:
    image: python:3.10-alpine
    volumes:
      - ./app:/app
    working_dir: /app
    command: sh -c "pip install fastapi uvicorn && uvicorn main:app --host 0.0.0.0 --port 8000"
    networks:
      backend:
        ipv4_address: 172.21.0.4

  dns:
    image: andyshinn/dnsmasq
    command: --log-queries --address=/web.local/172.20.0.3
    networks:
      frontend:
        ipv4_address: 172.20.0.53

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
```

main.py 파일을 app 디렉토리에 생성합니다:

```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Hello from API"}
```

nginx.conf 파일을 생성합니다:

```nginx
server {
    listen 80;
    server_name web.local;

    location / {
        return 200 'Welcome to Nginx frontend\n';
    }

    location /api {
        proxy_pass http://172.21.0.4:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
```

이 구성을 실행한 후, 다음과 같은 실습이 가능합니다:

```bash
# 컴포즈 실행
docker-compose up -d

# DNS 해석 확인
docker-compose exec client dig @172.20.0.53 web.local

# HTTP 요청 테스트
docker-compose exec client apk add curl
docker-compose exec client curl http://web.local
docker-compose exec client curl http://web.local/api

# tcpdump로 트래픽 분석
docker-compose exec web apk add tcpdump
docker-compose exec web tcpdump -i eth0 -n port 80
```

이 실습을 통해 DNS 해석(응용 계층), HTTP 프록시(응용 계층), TCP 연결(전송 계층), IP 라우팅(인터넷 계층) 등 다양한 네트워크 계층의 동작을 한 번에 관찰할 수 있습니다.

Docker를 이용한 이러한 실습은 실제 네트워크 환경을 간단히 시뮬레이션하면서도 다양한 네트워크 계층의 동작을 직접 확인할 수 있어 TCP/IP 스택을 이해하는 데 큰 도움이 될 것입니다.